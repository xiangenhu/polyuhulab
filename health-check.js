#!/usr/bin/env node

/**
 * Comprehensive health check script for Hu Lab Portal
 * Tests both Google Cloud Storage and xAPI LRS connectivity
 */

require('dotenv').config({ path: './.env' });
const gcsService = require('./services/gcsService');
const xapiService = require('./services/xapiService');

async function testXAPI() {
    console.log('üîç Testing xAPI LRS connectivity...\n');

    console.log('Configuration:');
    console.log(`- LRS Endpoint: ${process.env.LRS_ENDPOINT || 'NOT SET'}`);
    console.log(`- LRS Username: ${process.env.LRS_USERNAME || 'NOT SET'}`);
    console.log(`- LRS Password: ${process.env.LRS_PASSWORD ? '***SET***' : 'NOT SET'}\n`);

    try {
        // Test 1: Initialize xAPI connection
        console.log('1Ô∏è‚É£ Initializing xAPI LRS connection...');
        await xapiService.initialize();
        console.log('‚úÖ xAPI LRS initialized successfully\n');

        // Test 2: Send a test statement
        console.log('2Ô∏è‚É£ Testing xAPI statement creation...');
        const testStatement = {
            actor: { email: 'health-check@hulab.edu.hk', name: 'Health Check Script' },
            verb: xapiService.customVerbs.experienced,
            object: {
                id: `${xapiService.baseActivityId}/health-check`,
                definition: {
                    name: { 'en-US': 'System Health Check' },
                    description: { 'en-US': 'Automated health check test' }
                }
            },
            result: {
                completion: true,
                success: true,
                score: { scaled: 1.0 }
            },
            context: {
                extensions: {
                    'http://hulab.edu.hk/context/test': true,
                    'http://hulab.edu.hk/context/timestamp': new Date().toISOString()
                }
            }
        };

        const statementResult = await xapiService.sendStatement(testStatement);
        console.log('‚úÖ Test statement sent successfully');
        console.log(`   Statement ID: ${statementResult.id || 'Generated by LRS'}\n`);

        // Test 3: Query statements (test read capability)
        console.log('3Ô∏è‚É£ Testing xAPI statement retrieval...');
        try {
            const statements = await xapiService.getStatements({
                limit: 5,
                verb: xapiService.customVerbs.experienced
            });
            console.log('‚úÖ Statement retrieval successful');
            console.log(`   Retrieved ${statements.length || 0} statements\n`);
        } catch (queryError) {
            console.log('‚ö†Ô∏è  Statement retrieval test completed (may be normal for some LRS configurations)');
            console.log(`   Details: ${queryError.message}\n`);
        }

        // Test 4: Test profile operations
        console.log('4Ô∏è‚É£ Testing profile operations...');
        try {
            const testProfile = {
                userId: 'health-check@hulab.edu.hk',
                testData: {
                    timestamp: new Date().toISOString(),
                    healthCheck: true,
                    version: '1.0.0'
                }
            };

            await xapiService.saveUserProfile('health-check@hulab.edu.hk', testProfile);
            console.log('‚úÖ Profile save successful');

            const retrievedProfile = await xapiService.getUserProfile('health-check@hulab.edu.hk');
            console.log('‚úÖ Profile retrieval successful');
            console.log(`   Profile data: ${JSON.stringify(retrievedProfile).substring(0, 100)}...\n`);
        } catch (profileError) {
            console.log('‚ö†Ô∏è  Profile operations test completed with warnings');
            console.log(`   Details: ${profileError.message}\n`);
        }

        return true;

    } catch (error) {
        console.log('‚ùå xAPI LRS test failed');
        console.log(`   Error: ${error.message}\n`);
        return false;
    }
}

async function testGCS() {
    console.log('üîç Testing Google Cloud Storage connectivity...\n');

    try {
        const healthResult = await gcsService.healthCheck();
        
        if (healthResult.status === 'healthy') {
            console.log('‚úÖ GCS health check passed');
            console.log(`   Bucket: ${healthResult.bucket}\n`);
            return true;
        } else {
            console.log('‚ùå GCS health check failed');
            console.log(`   Error: ${healthResult.error}\n`);
            return false;
        }
    } catch (error) {
        console.log('‚ùå GCS test failed');
        console.log(`   Error: ${error.message}\n`);
        return false;
    }
}

async function runHealthChecks() {
    console.log('üè• Hu Lab Portal - System Health Check');
    console.log('=====================================\n');

    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log(`Timestamp: ${new Date().toISOString()}\n`);

    const results = {
        gcs: false,
        xapi: false,
        overall: false
    };

    // Test GCS
    console.log('üì¶ GOOGLE CLOUD STORAGE');
    console.log('========================');
    results.gcs = await testGCS();

    // Test xAPI LRS
    console.log('üìä xAPI LEARNING RECORD STORE');
    console.log('==============================');
    results.xapi = await testXAPI();

    // Overall results
    results.overall = results.gcs && results.xapi;

    console.log('üèÅ HEALTH CHECK SUMMARY');
    console.log('========================');
    console.log(`Google Cloud Storage: ${results.gcs ? '‚úÖ HEALTHY' : '‚ùå UNHEALTHY'}`);
    console.log(`xAPI LRS: ${results.xapi ? '‚úÖ HEALTHY' : '‚ùå UNHEALTHY'}`);
    console.log(`Overall System: ${results.overall ? '‚úÖ ALL SYSTEMS OPERATIONAL' : '‚ö†Ô∏è ISSUES DETECTED'}\n`);

    if (!results.overall) {
        console.log('üîß TROUBLESHOOTING TIPS:');
        console.log('========================');
        
        if (!results.gcs) {
            console.log('Google Cloud Storage Issues:');
            console.log('‚Ä¢ Check GCS_* environment variables in .env');
            console.log('‚Ä¢ Verify service account key file exists and has proper permissions');
            console.log('‚Ä¢ Ensure GCP project has Storage API enabled');
            console.log('‚Ä¢ Check network connectivity to Google Cloud');
        }
        
        if (!results.xapi) {
            console.log('xAPI LRS Issues:');
            console.log('‚Ä¢ Check LRS_* environment variables in .env');
            console.log('‚Ä¢ Verify LRS endpoint URL is accessible');
            console.log('‚Ä¢ Check username/password credentials');
            console.log('‚Ä¢ Test LRS endpoint manually with curl or browser');
            console.log('‚Ä¢ Ensure LRS supports xAPI version 1.0.3');
        }
        console.log('');
    }

    return results;
}

// Export for use in server startup
module.exports = {
    runHealthChecks,
    testGCS,
    testXAPI
};

// Run health checks if script is called directly
if (require.main === module) {
    runHealthChecks()
        .then(results => {
            process.exit(results.overall ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå Health check failed with unexpected error:', error);
            process.exit(1);
        });
}